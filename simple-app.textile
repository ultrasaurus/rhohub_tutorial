h2. Step 1. Create the application 

From your dashboard, click on the “Create application” button.  On the page that follows, enter a name for your application and a description that will help you identify the app.  name you use for your application is purely for your own reference.  It appears on your dashboard, but need not be the final name of your released applicaton.

!http://img.skitch.com/20090830-f81k2pmf93s7r2t7gp64ukrfnp.jpg!

h2. Step 2. Create an Object

1.  Enter “product” as your object’s name.  
2.  Add attributes ‘brand’, ‘name’, ‘price’, ‘quantity’ and ‘sku’ to your object.  
3. Click “Create Object”.

!http://img.skitch.com/20090830-bekyyh4gt44yiah52qdn28jpx8.jpg!

The application creation wizard lets you create one object (this is the model in the Model-View-Controller pattern, which is common in web application frameworks).  This object which serves as a starting point for your application. 

Each object must have a unique name.

By default, each your application will contain views that allow your users to interact with the object, and each attribute you add to your object will be available as field or strings in your UI.   RhoHub also generates your controller file, containing code that supports default actions like listing, creating, displaying, updating and deleting your object will be created for the object as well. 

Note that each object you create must contain at least one attribute.  Object attributes should be named using alphanumeric strings.

While in this app we only use one object, you can create additional objects for your app by following the “Create new object” link under QuickLinks”. 

Note: The values of Object attributes are always represented as strings.

h2. Step 3. Take a look at your application 

Once you have created the Product object, you will be re-directed to a text editor embedded within the browser.  

A file tree is located on the left-hand side of the window that will allow you to inspect the files that have been automatically created for your application.  The tabs at the top of the tree allow you to view the client- and server-side code that has been generated:  for this application, we’ll ignore the server code for now. Under the client tab, all of the code for your “product” object is in a single folder in the app directory called “Product.”

h2. Step 4.  Define your app’s Start page

By default, a new Rhodes application displays the content in app/index.erb on launch.  In more complex applications, you can edit that file to contain links to different pages in your application. However, since this application only has a single object, we will use the products index as the start page.

1. Select “rhoconfig.txt” at the root level of the client directory. 
2.Define the path to your start page.
  Find 
      start_path = '/app'
  and change it to:
      start_path = '/app/Product'
  note: the paths are case-sensitive.
3.  Save your change (the button is to the upper-right hand side of the text editor).

h2. Step 5. Build the App

RhoHub allows you to build native applications for Android, iPhone, BlackBerry, and Windows Mobile based phones using the same simple code base.

However, mobile device simulators may only be supported on particular operating systems, so you may not be able to test your application locally for all platforms without some virtual machine magic:

*	Windows is required to test builds and install to a device for BlackBerry and Windows Mobile, however, running the simulators in Windows virtual machines such as VMware or Parallels works fine. 
*	Mac OS X 10.5+ is required for testing iPhone applications.

Since Android simulators are available for all major operating systems, we’ll build our app for Android in this tutorial.

Select the "Builds" tab at the top of the window.  

!http://img.skitch.com/20091103-k1d8j7e7qjteth35t8ciwe48gc.png!

Select "Android" as the "Build Type."

“Version” refers to the Rhodes version used to build the application – leave the default value in place.
 Click “Create Build” to begin building your application.  While your application is building, you will see the build status displayed below. 

!http://img.skitch.com/20091103-p85uahtmfmnumir6wapgmf8277.png!

When it is finished building, you should see "Success" in the status column:

!http://img.skitch.com/20091103-b2n7e7d7ekkbsr9bpwaugc8sju.png!

h2. Step 6. Test your App 

To test your app, you need to download and install "Android SDK 1.5":http://developer.android.com/sdk/1.5_r2/index.html on your development machine.   Don’t forget to modify your path to include “<path_to_android_directory>/tools” 
Even though you are using the 1.5 SDK, but you can build for Android 1.1, which will allow your application to work on all Android devices.  After installing the SDK, you'll need to set up and run the simulator before installing your application.

You’ll need to verify that you can run the simulator before installing your application.  At the command line, enter the following command to create a virtual device :

    android create avd --name rhoAndroid11 --target 1 --sdcard 32M --skin HVGA

The following output will be displayed:

    Android 1.1 is a basic Android platform.
    Do you wish to create a custom hardware profile [no]

Press return (you don't need a custom hardware profile), and you should see:

    Created AVD 'rhoAndroid11' based on Android 1.1

h3. Running the emulator 

To run the emulator, type the following at the command line:

    emulator -avd rhoAndroid11

The Android emulator will open in a window. The emulator window will open quickly, but you may see a black screen on the simulated device for a few minutes while you wait for the emulator to start up.  Continue to wait until it looks like this:

!http://img.skitch.com/20090906-r9nc75wt9g852crfji5qnu4x77.jpg!

h3. Install the app 

Return to RhoHub in your browser.  Click on the Builds tab.  You will see your build under the heading “Build Downloads”.  You will need to download your build by clicking on the zip file icon. To ensure that you have downloaded the correct build files (and not the source!), list the contents of the directory and verify that you only see the following two files: 
    Inventory.apk	
    log.txt 

To install the app in the emulator, use the Android adb command: 

    $ adb install Inventory.apk
    2099 KB/s (698543 bytes in 0.324s)
        pkg: /data/local/tmp/Inventory.apk
    Success


Note: your application will remain installed in the simulator even if you shut it down and launch it again.  When you want to uninstall, use the following command:

    adb uninstall com.rhomobile.inventory

h3. Open the app 

To see your app running in the simulator, click on the gray tab at the bottom of the screen:

!http://img.skitch.com/20090906-qxayxpx3b299ctf81f9941xq96.jpg!

The tab will slide up to reveal the built-in and installed applications. Your new “Inventory” application will be displayed with the Rhodes logo by default.

!http://img.skitch.com/20091103-g9mj8famn81g1d65sp15i8scus.png!

Click the application icon and Inventory will open to the product page:

!http://img.skitch.com/20091103-xxgkkm4g9spdknbsg6yqj46e2j.png!

h3. Using the Inventory application 

Your Inventory application features several auto-generated pages corresponding to the actions in your Product object’s controller.rb file ( “index”, “show”, “new”, “edit”, “create”, etc).   The page we are using as our start page uses the index action and the “/product/index” view file, so the first thing a user will  see when launching the application is the list of products they have added.

Intially the list is empty.  To create a new product record, click the “new” button on the index page.  You will see the following page: 

!http://img.skitch.com/20090907-r2fmxtnhschjxyqtgr65a523t1.jpg!

When you click “New”, the controller creates an instance of the Product object, then renders the page using new.erb.  You can see the method for the “new” action in your applications source code at Product/controller.rb line 18.  

You can now enter data for new product records.  New products you create will be displayed in a list on the index page.  The following screenshots show data entered for the Acme Hovercraft. When you click create, the controller.rb action “create” is called, creating the instance of the object and returning you to the main product page 

The main product index will now show one item in the list.  By default, only the first attribute you created for your object will be displayed to represent the product – in this case, Acme represents the Acme Hovercraft.

!http://img.skitch.com/20090907-r1xfe8fpcrc527kfx6twwmnx9.jpg!

To view all of the item’s attributes, click the link for that item.  If you click on the “Acme” item, you will see a page that displays all of the attributes for the hovercraft:

!http://img.skitch.com/20090907-rsibpt1d68i2dwrsx2s64jeb5.jpg!

To edit a product, click “Edit” in the top-right.  The application will display a page similar to the “new” page which allows you edit or delete the record:

!http://img.skitch.com/20090907-bja6nrtphxbjqnhseae8xpge7c.jpg!

h2. Modify views

By default, the index page displays items using the item’s first attribute, the brand of each product. But what if we have multiple products from the same manufacturer? We won’t be able to distinguish between them from the index alone.  

So that our users won’t have to view each record to find out which of the 27 Acme products is the hovercraft, let’s add the name of the product to the index page, allowing us to we can distinguish between different products from the same brand.  To modify the display of our application’s index page, we can simply edit our index.erb file.

1.  Back in your RhoHub editor for your project, , find the following line (around line 11) in app/Products/index.erb
<pre>
     &lt;li&gt;<%=link_to "#{x.brand}", :action => :show, :id => x.object%>&lt;/li&gt;
</pre>
   
2.  Add the product’s name to the list item as follows: 
<pre>
     &lt;li&gt;<%=link_to "#{x.brand} #{x.name}", :action => :show, :id => x.object%>&lt;/li&gt;
</pre>

3. Save the file.

h3. Re-load the app
Now that you have modifed your app on RhoHub.  Create another Android build from the builds page, download the zip and extract the files, then cd into that directory, uninstall and install. Here are the specific steps on the command line:

    $ cd dd9f9c6e-dc0b-41ad-97e0-6d9e90c0eee2
    $ adb uninstall com.rhomobile.inventory
    Success
    $ adb install Inventory.apk
    1626 KB/s (657878 bytes in 0.395s)
      pkg: /data/local/tmp/Inventory.apk
    Success

After reloading it (and adding another record for the "Ford Flitter", the main page should look like this:

!http://img.skitch.com/20090907-uy9ucwwrdrq7g5r3hj4u2p1tc.jpg!

You can build for other target platforms using RhoHub. To run other device builds, you will need to install the appropriate simulator and/or SDK from the platform vendor.
h2. iPhone Launcher 
If you are developing on a Mac and have installed the iPhone SDK, you can use the "iPhone Launcher" to easily download and run your app in the iPhone simulator.  It also includes a handy reload button that will build your application, if needed, download from RhoHub and install in your local simulator. 
!http://img.skitch.com/20091103-mep5rdim5yeksg67phtijtptd7.png!

Note: if you are running in the iPhone simulator and you want to look at the client log you can find it in a directory named like this (you will have to look for the correct GUID for your build -- it is easiest to find if you just reset the simulator and only test one app at a time):
    /Library/Application Support/iPhone Simulator/User/Applications/364FFCAF-C71D-4543-B293-9058E31CFFEE/Documents

h2. Windows Desktop Client 

[[Testing with the Rhodes Desktop Client]] is an alternate workflow on Windows which reduces the number of steps to testing your application (and starts much faster than the device simulators); however, you will still want to test your final application on the specific target platform.

