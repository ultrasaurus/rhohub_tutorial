h1. Building your first Crossplatform Native Smartphone App with RhoHub

The "Rhodes":http://wiki.rhomobile.com/index.php/Rhodes framework allows you to quickly create and build applications for multiple smartphone platforms. RhoHub makes deploying Rhodes applications even easier, reducing the overhead of getting started and as well as streamlining ongoing development effort. 
Rhodes applications are written in Ruby, and use standard conventions recognized by all web developers to navigate between views.
Interface design is quick and easy, as create your views using HTML and CSS, using embedded Ruby code to create dynamic, data-driven elements. 
This tutorial shows you how to build a simple product inventory application that allows users to create, retrieve and edit local data without requiring a connection to a the internet. 


h1. Step 1. Create your Rhohub account

Create a Rhohub account at rhohub.com.  After signing up, you will receive an email containing a link directing you to "http://<your-user-name>.rhohub.com/dashboard":http://%3Cyour-user-name%3E.rhohub.com/dashboard.  This is your public profile page.  To access your dashboard, click the "Login" link in the upper right-hand corner of the page and enter your login information. 

h1. Step 2. Create a new application

#  From your dashboard, click on the "Create application" button.  
#  On the page that follows, enter a code name for your application and a description that will help you identify the app.  The name and description you enter here will be visible to all other RhoHub users, unless you have created a private project.

!http://img.skitch.com/20090830-f81k2pmf93s7r2t7gp64ukrfnp.jpg!

h2. Step 3. Create an Object

    # Enter “product” as your object’s name.  
    # Add attributes ‘brand’, ‘name’, ‘price’, ‘quantity’ and ‘sku’ to your object.  
    # Click “Create Object”.

!http://img.skitch.com/20090830-bekyyh4gt44yiah52qdn28jpx8.jpg!

By default, each your application will contain views that allow your users to interact with the object, and each attribute you add to your object will be available as field or strings in your UI.   RhoHub also generates your controller file, containing code that supports default actions like listing, creating, displaying, updating and deleting your object will be created for the object as well. 
Note that each object you create must contain at least one attribute.  Object attributes should be named using alphanumeric strings.

While in this app we only use one object, you can create additional objects for your app by following the "Create new object" link under QuickLinks". 

h1. Step 4.  Take a look at your application

Once you have created the Product object, you will be passed to a text editor embedded within the browser.  The RhoHub text editor supports several keyboard shortcuts, so you can develop your mobile applications from any location.  
A file tree is located on the left-hand side of the window that will allow you to inspect the files that have been automatically created for your application.  The tabs at the top of the tree allow you to view the client- and server-side code that has been generated:  for this application, we'll ignore the server code. Under the client tab, all of the code for your "product" object is in a single folder in the app directory called "Product."



h1. Step 5.  Define your app's Start page
#  Select "rhoconfig.txt" at the root level of the client directory. 
#  Define the path to your start page.
#  Change the start path (start_path) to 

bc. start_path = '/app/Product'

Note: paths are case-sensitive.

Save your change (the button is to the upper-right hand side of the text editor).

By default, a new Rhodes application displays the content in app/index.erb on launch.  In more complex applications, you can edit that file to contain links to different pages in your application. However, since this application only has a single object, we will use the products index as the start page.



h1. Step 6.  Build the App

RhoHub allows you to build native applications for Android, iPhone, BlackBerry, and Windows Mobile based phones using the same simple code base.
However, mobile device simulators may only be supported on particular operating systems, so you may not be able to test your application locally for all platforms without some virtual machine magic:
*  Windows is required to test builds and install to a device for BlackBerry and Windows Mobile, however, running the simulators in Windows virtual machines such as VMware or Parallels works fine. 
*  Mac OS X 10.5+ is required for testing iPhone applications.

Since Android simulators are available for all major operating systems, we'll build our app for Android in this tutorial.

# Select the "Builds" tab at the top of the window.

!http://img.skitch.com/20091103-k1d8j7e7qjteth35t8ciwe48gc.png!

# Select "Android" as the "Build Type".
# "Version" refers to the Rhodes version used to build the application  -  leave the default value in place.
# Click "Create Build" to begin building your application.  While your application is building, you will see the build status displayed below. 

!http://img.skitch.com/20091103-p85uahtmfmnumir6wapgmf8277.png!

When your application is finished building, you will see "Success" in the status column:

!http://img.skitch.com/20091103-b2n7e7d7ekkbsr9bpwaugc8sju.png!

h1. Step 7.  Test the App

To test your app, you need to download and install the "Android SDK 1.5":http://developer.android.com/sdk/1.5_r2/index.html on your development machine.   Don't forget to modify your path to include  "path_to_android_directory/tools" 
You'll need to verify that you can run the simulator before installing your application.  At the command line, enter the following command to create a virtual device :

bc.  android create avd --name rhoAndroid11 --target 1 --sdcard 32M --skin HVGA

The following output will be displayed:

bc.  Android 1.1 is a basic Android platform.     
Do you wish to create a custom hardware profile [no]

Press return (you don't need a custom hardware profile), and you should see:

bc.  Created AVD 'rhoAndroid11' based on Android 1.1

To ensure backward compatibility, you will build your application for Android 1.1.  


**Running the emulator**

To run the emulator, type the following at the command line:

bc. emulator -avd rhoAndroid11

The Android emulator will open in a window. The emulator window will open quickly, but you may see a black screen on the simulated device for a few minutes while you wait for the emulator to start up.  Continue to wait until it looks like this:

!http://img.skitch.com/20090906-r9nc75wt9g852crfji5qnu4x77.jpg!

h3. Install the app

Return to RhoHub in your browser.  Click on the Builds tab.  You will see your build under the heading "Build Downloads".  You will need to download your build by clicking on the download icon. 

Once you have downloaded and unzipped the file, open a second terminal window and go to the directory where you unzipped the build from RhoHub 
To ensure that you have downloaded the correct build files (and not the source!), list the contents of the directory and verify that you only see the following two files: 

bc.  Inventory.apk* 
log.txt* 

To install the app in the emulator, use the Android adb command: 

bc.  $ adb install Inventory.apk 
2099 KB/s (698543 bytes in 0.324s)
pkg: /data/local/tmp/Inventory.apk 
Success


h3. Open the app

To see your app running in the simulator, click on the gray tab at the bottom of the screen:

!http://img.skitch.com/20090906-qxayxpx3b299ctf81f9941xq96.jpg!

The tab will slide up to reveal the built-in and installed applications. Your new “Inventory” application will be displayed with the Rhodes logo by default.

!http://img.skitch.com/20091103-g9mj8famn81g1d65sp15i8scus.png!

Click the application icon and Inventory will open to the product page:

!http://img.skitch.com/20091103-xxgkkm4g9spdknbsg6yqj46e2j.png!

h1. Using the Inventory application

Your Inventory application features several auto-generated pages corresponding to the actions in your Product object's controller.rb file ( "index", "show", "new", "edit", "create", etc).   The page we are using as our start page uses the index action and the "/product/index" view file, so the first thing a user will  see when launching the application is the list of products they have added.

But our list is empty!  Aha  -  we need to add records to the before they can be displayed in the list! 
To create a new product record, click the "new" button on the index page.  You will see the following page: 

!http://img.skitch.com/20090907-r2fmxtnhschjxyqtgr65a523t1.jpg!

When you click "New", the controller creates an instance of the Product object, then renders the page using new.erb.  You can see the method for the "new" action in your applications source code at Product/controller.rb line 18.  

You can now enter data for new product records.  New products you create will be displayed in a list on the index page.  The following screenshots show data entered for the Acme Hovercraft. When you click create, the controller.rb action "create" is called, creating the instance of the object and returning you to the main product page. 

The main product index will now show one item in the list.  By default, only the first attribute you created for your object will be displayed to represent the product  -  in this case, Acme represents the Acme Hovercraft.

!http://img.skitch.com/20090907-r1xfe8fpcrc527kfx6twwmnx9.jpg!

To view all of the item's attributes, click the link for that item.  If you click on the "Acme" item, you will see a page that displays all of the attributes for the hovercraft:

!http://img.skitch.com/20090907-rsibpt1d68i2dwrsx2s64jeb5.jpg!

To edit a product, click "Edit" in the top-right.  The application will display a page similar to the "new" page which allows you edit or delete the record:

!http://img.skitch.com/20090907-bja6nrtphxbjqnhseae8xpge7c.jpg!

h2. Step 8.  Customize your views

By default, the index page displays items using the item's first attribute, the brand of each product. But what if we have multiple products from the same manufacturer? We won't be able to distinguish between them from the index alone.  
So that our users won't have to view each record to find out which of the 27 Acme products is the hovercraft, let's add the name of the product to the index page, allowing us to we can distinguish between different products from the same brand.  To modify the display of our application's index page, we can simply edit our index.erb file.


    *  Back in your RhoHub editor for your project, find the following line (around line 11) in app/Products/index.erb

bc.  <li><%=link_to "#{x.brand}", :action => :show, :id => x.object%></li>

    *  Add the product's name to the list item as follows:  

bc.  <li><%=link_to "#{x.brand} #{x.name}", :action => :show, :id => x.object%></li>

    *  Save the file.

h3. Load the new version of the app

    *  Go to the builds tab and create a new build. 
    *  While the build is in progress, uninstall the last build if necessary.  Different simulators may differ in how you reinstall your application.  Since we're working with Android, we need to uninstall the previous version of the app from the simulator. 

bc. $ adb uninstall com.rhomobile.inventory

bc. Success

Note: the uninstall command uses your application's identifier (com.rhomobile.inventory) instead of the application's name used by the install command.

    *  When the build is complete, follow the same steps you used above to download and install the application in the simulator.

bc. $ adb install Inventory.apk 
1626 KB/s (657878 bytes in 0.395s)   
pkg: /data/local/tmp/Inventory.apk 
Success

    *  After you have installed the application, launch it from the simulator.  

    *  Add another product by clicking the "New" button.  Create a product with using the brand "Ford",  and the name "Flitter".  The main page should now look like this:

!http://img.skitch.com/20090907-uy9ucwwrdrq7g5r3hj4u2p1tc.jpg!

h1. Building for other platforms

Okay, now we have an Android app that lets us add products to a list.  What changes do we need to make to our code for it to run on other platforms?
Nothing!  You can use the same code without any modifications to build your application for other target platforms using RhoHub. 
To test other device builds, you will need to install the appropriate simulator and/or SDK from the platform vendor.

h3. iPhone Launcher

If you are developing applications for the iPhone on a Mac and have installed the iPhone SDK, download the Rhodes Desktop Client from your Inventory application's overview tab.
The desktop client provides a single button that enables you to easily build, download and run your app in the iPhone simulator with a single click. 

Note: if you are running in the iPhone simulator and you want to look at the client log you can find it in the following directory under your user account: 



bc. ~/Library/Application Support/iPhone Simulator/User/Applications/

The application is contained in a folder named after its GUID.  If you have multiple projects in your iphone directory, finding the GUID might be tricky... but sorting the files by date modified usually puts the most recently installed app at the top of the list.  

Note: If you sort the contents of the Applications directory by date modified descending, there will be a file ending in .sb near the top of your list of applications  -  if the timestamp on that file matches the time you clicked "Reload Application", the filename most likely represents the GUID of your application.  
In the folder labeled with your application's GUID you will find your logs in the Documents folder.


h3. Windows Desktop Client

"Testing with the Rhodes Desktop Client":http://wiki.rhomobile.com/index.php/Testing_with_the_Rhodes_Desktop_Client is an alternate workflow on Windows that reduces the number of steps required to test your application (and starts much faster than the device simulators); however, you will still want to test your final application on the specific target platform.